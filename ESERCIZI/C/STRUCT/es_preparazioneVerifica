/*
Esercizio – Preparazione verifica
Scrivere un programma in C che dopo aver dichiarato una struttura denominata Persona con i
seguenti campi: Nome, Cognome, età, codice fiscale, reddito annuo, anno_nascita,residenza(città) ;
determini:
1) La persona con reddito annuo più alto e quella con reddito annuo più basso.Visualizzare
per entrambe: nome, cognome, città e reddito.
2) Ordinare la lista delle persone in base all’anno di nascita** (dal più anziano al più
giovane), e visualizzarla.
3) Consentire all’utente di cercare una persona inserendo il codice fiscale..
4) Visualizzare tutte le persone con reddito superiore o uguale a un valore scelto dall’utente.
5) Calcolare la media dei redditi delle persone registrate nel sistema.
6) Visualizzare tutte le persone nate in un anno specifico, scelto dall’utente;
7) Visualizzare l&#39;elenco delle persone raggruppate per città di residenza, indicando per
ciascuna città: Quante persone vi risiedono, L’età media dei residenti
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 50



typedef struct {
    char nome[MAX];
    char cognome[MAX];
    int eta;
    char codice_fiscale[16];
    float reddito_annuo;
    int anno_nascita;
    char residenza[MAX];
}Persona;



void inserisciPersona(Persona elenco[], int n) {
    for(int i = 0; i < n; i++) {
        printf("\n---Persona %d---\n", i + 1);
        
        printf("Nome: ");
        scanf("%s", elenco[i].nome);
        
        printf("Cognome: ");
        scanf("%s", elenco[i].cognome);
        
        printf("Eta': ");
        scanf("%d", &elenco[i].eta);
        
        printf("Codice fiscale: ");
        scanf("%s", elenco[i].codice_fiscale);
        
        printf("Reddito annuo: ");
        scanf("%f", &elenco[i].reddito_annuo);
        
        printf("Anno di nascita: ");
        scanf("%d", &elenco[i].anno_nascita);
        
        printf("Residenza: ");
        scanf("%s", elenco[i].residenza);
        
    }
}

int visualizzaMax(Persona elenco[], int n) {
    float max = elenco[0].reddito_annuo;
    int indice = 0;
    for(int i = 0; i < n; i++) {
        if(elenco[i].reddito_annuo > max) {
            max = elenco[i].reddito_annuo;
            indice = i;
        }
    }
    return indice;
}

int visualizzaMin(Persona elenco[], int n) {
    float min = elenco[0].reddito_annuo;
    int indice = 0;
    for(int i = 0; i < n; i++) {
        if(elenco[i].reddito_annuo < min) {
            min = elenco[i].reddito_annuo;
            indice = i;
        }
    }
    return indice;
}

void visualizzaDettagli(Persona p) {
    printf("Nome: %s - Cognome: %s - Residenza: %s - Reddito annuo: %.2f\n", p.nome, p.cognome, p.residenza, p.reddito_annuo);
}

void visualizzaDettagliAnnoNascita(Persona p) {
    printf("Nome: %s - Cognome: %s - Residenza: %s - Reddito annuo: %.2f - Anno nascita: %d\n", p.nome, p.cognome, p.residenza, p.reddito_annuo, p.anno_nascita);
}

void visualizzaDettagliCodiceFiscale(Persona p) {
    printf("Nome: %s - Cognome: %s - Residenza: %s - Reddito annuo: %.2f - Codice fiscale: %s\n", p.nome, p.cognome, p.residenza, p.reddito_annuo, p.codice_fiscale);
}



void ordinaElenco(Persona elenco[], int n) {
    Persona tmp;
    for(int i = 0; i < n - 1; i++) {
        for(int j = 0; j < n - i - 1; j++) {
            if(elenco[j].anno_nascita > elenco[j + 1].anno_nascita) {
                tmp = elenco[j];
                elenco[j] = elenco[j + 1];
                elenco[j + 1] = tmp;
            }
        }
    }
}

int cercaPerCodiceFiscale(Persona elenco[], int n, char codice_fiscale[16]) {
    int trovato = 0, indice = -1;
    
    for(int i = 0; i < n; i++) {
        if(strcmp(elenco[i].codice_fiscale, codice_fiscale) == 0) {
            printf("\nPersona trovata.\n");
            trovato = 1;
            indice = i;
        }
    }
    
    if(!trovato) {
        printf("\nPersona NON trovata.\n");
    }
    
    return indice;
}

void visualizzaPerRedditoMinimo(Persona elenco[], int n, float reddito_annuo_minimo) {
    for(int i = 0; i < n; i++) {
        if(elenco[i].reddito_annuo >= reddito_annuo_minimo) {
            visualizzaDettagli(elenco[i]);
        }
    }
}

float calcolaMediaRedditi(Persona elenco[], int n) {
    float media = 0, somma = 0;
    
    for(int i = 0; i < n; i++) {
        somma += elenco[i].reddito_annuo;
    }
    
    media = somma / n;
    
    return media;
}

void visualizzaPerAnnoNascita(Persona elenco[], int n, int anno_nascita) {
    for(int i = 0; i < n; i++) {
        if(elenco[i].anno_nascita == anno_nascita) {
            visualizzaDettagliAnnoNascita(elenco[i]);
        }
    }
}



int main()
{
    int n;
    printf("Inserisci il numero di persone: ");
    scanf("%d", &n);
    
    Persona elenco[n];
    
    inserisciPersona(elenco, n);
    
    printf("\nPersona con reddito annuo piu' alto:\n");
    visualizzaDettagli(elenco[visualizzaMax(elenco, n)]);
    
    printf("\nPersona con reddito annuo piu' basso:\n");
    visualizzaDettagli(elenco[visualizzaMin(elenco, n)]);
    
    ordinaElenco(elenco, n);
    
    printf("\nElenco persone ordinato per anno di nascita:\n");
    for(int i = 0; i < n; i++) {
        visualizzaDettagliAnnoNascita(elenco[i]);
    }
    
    char codice_fiscale[16];
    printf("\nInserisci il codice fiscale da cercare:\n");
    scanf("%s", codice_fiscale);
    
    int scelta = cercaPerCodiceFiscale(elenco, n, codice_fiscale);
    if(scelta != -1) {
        visualizzaDettagliCodiceFiscale(elenco[scelta]);
    }
    
    float reddito_annuo_minimo;
    printf("\nInserisci reddito annuo minimo:\n");
    scanf("%f", &reddito_annuo_minimo);
    
    printf("\nPersone con reddito annuo minimo maggiore o uguale a quello inserito:\n");
    visualizzaPerRedditoMinimo(elenco, n, reddito_annuo_minimo);
    
    printf("\nMedia dei redditi delle persone nell'elenco: %.2f\n", calcolaMediaRedditi(elenco, n));
    
    int anno_nascita;
    printf("\nInserisci un anno di nascita per visualizzare le persone:\n");
    scanf("%d", &anno_nascita);
    
    visualizzaPerAnnoNascita(elenco, n, anno_nascita);

    return 0;
}
